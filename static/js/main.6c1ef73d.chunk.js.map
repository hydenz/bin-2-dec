{"version":3,"sources":["Components/Main/TextHandler.module.css","Components/Main/Main.module.css","Components/Footer/Footer.module.css","Components/Header/Header.jsx","Hooks/useLocalStorage.js","Components/Main/TextHandler.jsx","Components/Main/Main.jsx","Components/Footer/Footer.jsx","Components/App/App.jsx","index.jsx"],"names":["module","exports","Header","className","useLocalStorage","key","initialValue","useState","item","window","localStorage","getItem","JSON","parse","error","console","log","storedValue","setStoredValue","value","valueToStore","Function","setItem","stringify","TextArea","title","readOnly","onChange","defaultCopyBtnIcon","size","copiedBtnIcon","clipboardBtnText","setClipboardBtnText","clipIcon","setClipIcon","styles","texthandler","type","onClick","navigator","clipboard","writeText","setTimeout","btn","btntxt","defaultProps","Main","inputValue","currentBase","localData","setLocalData","outputValue","setOutputValue","baseTypes","binary","regExp","cvtFn","number","bigInt","decimal","toString","useEffect","input","numbers","split","filter","inputs","output","forEach","trim","cvtInput","converter","TextHandler","e","userInput","target","test","oldData","controls","Footer","footer","ghlink","rel","href","color","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.6c1ef73d.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"texthandler\":\"TextHandler_texthandler__3F_Cc\",\"title\":\"TextHandler_title__1jH9W\",\"value\":\"TextHandler_value__1HiHg\",\"btn\":\"TextHandler_btn__3erwx\",\"btntxt\":\"TextHandler_btntxt__RLcW4\",\"btntext\":\"TextHandler_btntext__2VijF\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"converter\":\"Main_converter__3-9Oo\",\"controls\":\"Main_controls__2zgFO\",\"btn\":\"Main_btn__2BRU6\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"footer\":\"Footer_footer__2BJAd\",\"ghlink\":\"Footer_ghlink___RMej\"};","import React from 'react';\r\nimport './Header.css';\r\n\r\nconst Header = () => (\r\n  <header className='header'>\r\n    <h1 className='header__title'>Bin 2 Dec</h1>\r\n  </header>\r\n);\r\n\r\nexport default Header;\r\n","/* eslint no-console: \"off\" */\r\nimport { useState } from 'react';\r\n\r\nfunction useLocalStorage(key, initialValue) {\r\n  const [storedValue, setStoredValue] = useState(() => {\r\n    try {\r\n      const item = window.localStorage.getItem(key);\r\n      return item ? JSON.parse(item) : initialValue;\r\n    } catch (error) {\r\n      console.log(error);\r\n      return initialValue;\r\n    }\r\n  });\r\n\r\n  const setValue = (value) => {\r\n    try {\r\n      const valueToStore =\r\n        value instanceof Function ? value(storedValue) : value;\r\n      setStoredValue(valueToStore);\r\n      window.localStorage.setItem(key, JSON.stringify(valueToStore));\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  };\r\n\r\n  return [storedValue, setValue];\r\n}\r\n\r\nexport default useLocalStorage;\r\n","import React, { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { RiClipboardFill, RiCheckLine } from 'react-icons/ri';\r\nimport styles from './TextHandler.module.css';\r\n\r\nconst TextArea = ({ title, value, readOnly, onChange }) => {\r\n  const defaultCopyBtnIcon = <RiClipboardFill size='19px' />;\r\n  const copiedBtnIcon = <RiCheckLine size='19px' />;\r\n  const [clipboardBtnText, setClipboardBtnText] = useState('Copy to clipboard');\r\n  const [clipIcon, setClipIcon] = useState(defaultCopyBtnIcon);\r\n\r\n  const copyToClipboard = () => {\r\n    setClipboardBtnText('Copied!');\r\n    setClipIcon(copiedBtnIcon);\r\n    navigator.clipboard.writeText(value);\r\n    setTimeout(() => {\r\n      setClipboardBtnText('Copy to clipboard');\r\n      setClipIcon(defaultCopyBtnIcon);\r\n    }, 3000);\r\n  };\r\n\r\n  return (\r\n    <div className={styles.texthandler}>\r\n      <h2 className={styles.title}>{title}</h2>\r\n      <textarea\r\n        className={styles.value}\r\n        value={value}\r\n        onChange={onChange}\r\n        readOnly={readOnly}\r\n      />\r\n      <button type='button' onClick={copyToClipboard} className={styles.btn}>\r\n        {clipIcon}\r\n        <span className={styles.btntxt}>{clipboardBtnText}</span>\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TextArea;\r\n\r\nTextArea.propTypes = {\r\n  title: PropTypes.string.isRequired,\r\n  value: PropTypes.string.isRequired,\r\n  readOnly: PropTypes.bool,\r\n  onChange: PropTypes.func,\r\n};\r\n\r\nTextArea.defaultProps = {\r\n  readOnly: false,\r\n  onChange: () => {},\r\n};\r\n","import React, { useState, useEffect } from 'react';\r\nimport { RiArrowLeftRightLine, RiArrowRightLine } from 'react-icons/ri';\r\nimport bigInt from 'big-integer';\r\nimport useLocalStorage from '../../Hooks/useLocalStorage';\r\nimport styles from './Main.module.css';\r\nimport TextHandler from './TextHandler';\r\n/* Since JavaScript max safe integer is 2^53 - 1, I used big-integer library to ensure that\r\n   it can convert numbers bigger than that */\r\n\r\nconst Main = () => {\r\n  const [localData, setLocalData] = useLocalStorage('bin-2-dec-data', {\r\n    inputValue: '',\r\n    currentBase: 'binary',\r\n  });\r\n  const [outputValue, setOutputValue] = useState('');\r\n\r\n  const baseTypes = {\r\n    binary: {\r\n      title: 'Binary Base',\r\n      regExp: /^[0-1 ]*$/,\r\n      cvtFn: (number) => bigInt(number, 2),\r\n    },\r\n    decimal: {\r\n      title: 'Decimal Base',\r\n      regExp: /^[0-9 ]*$/,\r\n      cvtFn: (number) => bigInt(number).toString(2),\r\n    },\r\n  };\r\n\r\n  const handleInputChange = (e) => {\r\n    const userInput = e.target.value;\r\n    if (baseTypes[localData.currentBase].regExp.test(userInput))\r\n      setLocalData((oldData) => ({ ...oldData, inputValue: userInput }));\r\n  };\r\n\r\n  const handleBaseChange = () => {\r\n    setLocalData((oldData) => ({\r\n      inputValue: outputValue,\r\n      currentBase: oldData.currentBase === 'binary' ? 'decimal' : 'binary',\r\n    }));\r\n  };\r\n\r\n  useEffect(() => {\r\n    const cvtInput = (input) => {\r\n      const numbers = input.split(' ').filter((inputs) => inputs !== '');\r\n      let output = '';\r\n      numbers.forEach((number) => {\r\n        output += `${baseTypes[localData.currentBase].cvtFn(number)} `;\r\n      });\r\n      return output.trim();\r\n    };\r\n\r\n    if (localData.inputValue) setOutputValue(cvtInput(localData.inputValue));\r\n    else setOutputValue('');\r\n  }, [localData]);\r\n\r\n  return (\r\n    <div className={styles.converter}>\r\n      <TextHandler\r\n        value={localData.inputValue}\r\n        onChange={handleInputChange}\r\n        title={baseTypes[localData.currentBase].title}\r\n      />\r\n      <div className={styles.controls}>\r\n        <RiArrowLeftRightLine\r\n          size='40px'\r\n          className={styles.btn}\r\n          onClick={handleBaseChange}\r\n        />\r\n        <RiArrowRightLine size='40px' />\r\n      </div>\r\n      <TextHandler\r\n        value={outputValue}\r\n        readOnly\r\n        title={\r\n          localData.currentBase === 'binary'\r\n            ? baseTypes.decimal.title\r\n            : baseTypes.binary.title\r\n        }\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Main;\r\n","import React from 'react';\r\nimport { RiHeartFill, RiGithubFill } from 'react-icons/ri';\r\nimport styles from './Footer.module.css';\r\n\r\nconst Footer = () => (\r\n  <footer className={styles.footer}>\r\n    <a\r\n      className={styles.ghlink}\r\n      target='_blank'\r\n      rel='noreferrer'\r\n      href='https://github.com/hydenz'\r\n    >\r\n      Made with <RiHeartFill color='#fff' /> by <RiGithubFill color='#fff' />\r\n      hydenz\r\n    </a>\r\n  </footer>\r\n);\r\n\r\nexport default Footer;\r\n","import React from 'react';\nimport Header from '../Header/Header';\nimport Main from '../Main/Main';\nimport Footer from '../Footer/Footer';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className='App'>\n      <Header />\n      <Main />\n      <Footer />\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './Components/App/App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}